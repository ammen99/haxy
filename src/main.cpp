#include <iostream>
#include <fstream>
#include <unistd.h>
#include <sys/stat.h>

#include "val.hpp"
#include "eval.hpp"
#include "byte.hpp"

std::string load_file(std::string path) {
    std::fstream stream(path, std::ios::in | std::ios::out);

    std::string res, line;
    while(std::getline(stream, line)) res += line + '\n';

    return res;
}

bool file_exists(std::string str) {
    struct stat tmp;
    return (stat(str.c_str(), &tmp) == 0);
}

#define ModeInterpret (1 << 0)
#define ModeCompile   (1 << 1)

void compile(std::string name, bool debug = false) {
    std::cout << "compiling ... " << std::endl;
    mpc_parser_t* num  = mpc_new("number");
    mpc_parser_t* dbl  = mpc_new("dbl");
    mpc_parser_t* bl   = mpc_new("bool");
    mpc_parser_t* str  = mpc_new("str");
    mpc_parser_t* op   = mpc_new("operator");
    mpc_parser_t* id   = mpc_new("ident");
    mpc_parser_t* noarg= mpc_new("noarg");
    mpc_parser_t* arg  = mpc_new("arg");
    mpc_parser_t* args = mpc_new("args");
    mpc_parser_t* func = mpc_new("func");
    mpc_parser_t* expr = mpc_new("expr");
    mpc_parser_t* var  = mpc_new("var");
    mpc_parser_t* lst  = mpc_new("list");
    mpc_parser_t* st   = mpc_new("state"); 
    mpc_parser_t* fd   = mpc_new("fundef");
    mpc_parser_t* top  = mpc_new("toplevel");
    mpc_parser_t* norm = mpc_new("value");
    mpc_parser_t* body = mpc_new("body");
    mpc_parser_t* comp = mpc_new("comp");
    mpc_parser_t* gcomp= mpc_new("gcomp");
    mpc_parser_t* iff  = mpc_new("if");
    mpc_parser_t* elif = mpc_new("elif");
    mpc_parser_t* felif= mpc_new("felif");
    mpc_parser_t* wh   = mpc_new("while");
    mpc_parser_t* elsee= mpc_new("else");
    mpc_parser_t* cond = mpc_new("cond");
    mpc_parser_t* assi = mpc_new("assign");
    mpc_parser_t* cmd  = mpc_new("lispy");
    mpc_parser_t* ret  = mpc_new("return");
    mpc_parser_t* lq   = mpc_new("listq");
    mpc_parser_t* clss = mpc_new("class");
    mpc_parser_t* memb = mpc_new("member");

    auto lex = load_file("/home/ilex/haxy/src/num.lex");
    mpca_lang(MPCA_LANG_DEFAULT, lex.c_str(), clss, lq, ret, wh, assi, felif, elif, elsee, cond, iff, norm,
            comp, gcomp, num, bl, op, body, str, id, 
            arg, args, noarg, func,
            expr, st, fd, var, lst, top, dbl, memb, cmd);

    if(!file_exists(name + ".hx")) {
        std::cerr << "No such file. Aborting..." << std::endl;
        std::exit(-1);
    }

    std::string src = load_file(name + ".hx");

    mpc_result_t res;
    if(mpc_parse("input", src.c_str(), cmd, &res)) {

        if(debug) mpc_ast_print(ast(res.output));

        auto tree = haxy::AstGenerator::parse_file((AstNodeT)(res.output));

        if(debug) {
            haxy::AstPrinter printer;
            printer.write_tree(tree);
        }

        haxy::AstWriter writer(name + ".hc");
        writer.write_tree(tree);
    }
    else {
        std::cerr << "Compilation failed! Possibly syntax error in file!" << std::endl;
        mpc_err_print(res.error),
        mpc_err_delete(res.error);
    } 

    mpc_cleanup(9, elsee, elif, noarg, cond, num, lq, str,
            wh, op, id, assi, felif, arg, args, bl, func, norm, body,
            comp, gcomp, expr, var, lst, st, dbl, clss, memb, ret, fd, iff, top, cmd);

    std::cout << "written" << std::endl;
}

int main(int argc, char *argv[]) {

    extern char *optarg;
    extern int   optind;

    int mode = ModeInterpret;

    int c;

    while((c = getopt(argc, argv, "c::i::")) != -1) {
        switch (c){
            case 'c':
                mode = ModeCompile;
                break;
            case 'i':
                mode = ModeInterpret;
                break;
        }
    }

    std::string name = argv[optind];

    /* remove .hx/.hc ending if it is given */
    auto sz = name.size();
    if(name.size() > 3 && name[sz - 3] == '.' && name[sz - 2] == 'h' &&
            (name[sz - 1] == 'x' || name[sz - 1] == 'c'))
        name = name.substr(0, sz - 3);

    /* ModeInterpret reads the already generated bytecode and executes it */
    if(mode == ModeInterpret) {
        // TODO: recompile if file has changed
        if(!file_exists(name + ".hc"))
            compile(name, false);

        auto src = load_file(name + ".hc"); 

        std::cout << "here" << std::endl;

        haxy::AstReader reader(src);
        auto tree = reader.read_tree();

        //haxy::AstPrinter p;
        //p.write_tree(tree);

        haxy::AstEvaluator evaluator;
        evaluator.init();
        evaluator.eval(tree);
    }

    else {
        compile(name, false);
    }

    return 0;
}
